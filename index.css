:root {
	color-scheme: light dark;
	--primary: light-dark(#a0d49b, #39693b);
	--on-primary: light-dark(#ffffff, #083910);
	--secondary: light-dark(#52634f, #b9ccb4);
	--on-secondary: light-dark(#ffffff, #253423);
	--tertiary: light-dark(#39656b, #a1ced4);
	--on-tertiary: light-dark(#ffffff, #00363b);
	--primary-container: light-dark(hsl(115.9 65.9% 82.7%), hsl(121.3 39.1% 22.5%));
	--on-primary-container: light-dark(#002105, #bbf0b5);
	--secondary-container: light-dark(#d5e8cf, #3b4b39);
	--on-secondary-container: light-dark(#101f10, #d5e8cf);
	--tertiary-container: light-dark(#bcebf1, #1f4d52);
	--on-tertiary-container: light-dark(#001f23, #bcebf1);
	--surface-dim: light-dark(#d7dbd3, #10140f);
	--surface: light-dark(hsl(84 55.6% 96.5%), hsl(108 14.3% 6.9%));
	--surface-bright: light-dark(#f7fbf1, #363a34);
	--surface-container-lowest: light-dark(#ffffff, #0b0f0a);
	--surface-container-low: light-dark(#f1f5ec, #181d17);
	--surface-container: light-dark(#ebefe6, #1c211b);
	--surface-container-high: light-dark(#e6e9e0, #272b25);
	--surface-container-highest: light-dark(#e0e4db, #323630);
	--on-surface: light-dark(#181d17, #e0e4db);
	--on-surface-variable: light-dark(#424940, #c2c9bd);
	--outline: light-dark(#72796f, #8c9388);
	--outline-variant: light-dark(#c2c9bd, #424940);
	--inverse-surface: light-dark(#2d322c, #e0e4db);
	--inverse-on-surface: light-dark(#eef2e9, #2d322c);
	--inverse-primary: light-dark(#9fd49c, #3b693a);
	--scrim: light-dark(#000000, #000000);
	--shadow: light-dark(#000000, #000000);
	--bar-width: 50px;
	--checker-radius: 20px;
	--checker-diameter: calc(var(--checker-radius) * 2);
	--checker-thickness: 5px;
	--checkers-per-player: 15;
	--die-side-length: 40px;
	--die-gap: 8px;
	--half-width: calc(var(--point-width) * 6);
	--half-height: calc(var(--point-height) * 2 + var(--checker-diameter) * 2 + var(--die-side-length) + 40px);
	--hold-width: var(--checker-diameter);
	--hold-height: calc(var(--checkers-per-player) * var(--checker-thickness));
	--player-1-checker-background: hsl(0 0% 0%);
	--player-1-checker-text-color: var(--player-2-checker-background);
	--player-2-checker-background: hsl(0 0% 100%);
	--player-2-checker-text-color: var(--player-1-checker-background);
	--point-count: 24;
	--point-per-side: calc(var(--point-count) / 2);
	--point-min: 1;
	--point-max: 24;
	--point-width: var(--checker-diameter);
	--point-height: calc(var(--checker-diameter) * 4);
}

*, ::before, ::after {
	box-sizing: border-box;
}

.secondary-container {
	background: var(--secondary-container);
	color: var(--on-secondary-container);
}

.surface {
	background: var(--surface);
	color: var(--on-surface);
}

.surface-container {
	background: var(--surface-container);
}

.surface-container-high {
	background: var(--surface-container-high);
}

html {
	font: 16px/1.5 system-ui;
}

body {
	width: 100vi;
	height: 100vb;
	display: flex;
	justify-content: center;
	align-items: center;
	gap: 1rem;
	margin: 0;
	padding: 1rem;
}

button {
	cursor: pointer;

	&:disabled {
		cursor: not-allowed;
	}
}

body > div {
	display: grid;
	grid:
		'player1 timer     player2' minmax(min-content, max-content)
		'player1 play-mode player2' minmax(min-content, max-content)
		/minmax(max-content, 1fr) minmax(min-content, max-content) minmax(max-content, 1fr);
	writing-mode: sideways-lr;
	justify-content: space-around;
	align-items: center;
	gap: 1rem;
	padding: .5rem;
	border-radius: 8px;

	& > div[data-player] {
		display: grid;
		gap: 0 .75rem;
		padding-inline: .5rem 1rem;
		padding-block: .5rem;
		border-radius: .5rem;

		& > div {
			display: contents;

			& > .name {
				grid-area: name;
				font-weight: bold;
				font-size: 1.5rem;
			}

			& > .checker {
				grid-area: checker;
				align-self: center;
			}

			& > .points {
				grid-area: points;
				font-style: italic;
				font-size: 1rem;

				& > span {
					font-weight: bold;

					&:first-of-type {
						color: var(--secondary);
					}
				}
			}
		}

		& > .pip {
			grid-area: pip;
			inline-size: 5rem;
			display: grid;
			grid-template-columns: 1fr max-content;
			gap: .25rem;
			padding: .5rem;
			border-radius: .5rem;
			font-weight: bold;

			& > span:first-of-type {
				align-self: start;
				line-height: 1;
			}

			& > a {
				block-size: 1rem;
				inline-size: 1rem;
				align-self: start;
				line-height: 1;
				color: inherit;

				&:hover {
					opacity: .5;
				}
			}

			& > a {
				text-decoration: none;
				font-size: .9rem;
			}

			& > span:last-of-type {
				grid-column: span 2;
				line-height: 1;
				color: var(--secondary);
				font-size: 2rem;
			}
		}

		&[data-player="1"] {
			grid-area: player1;
			grid-template-areas:
				"pip name checker"
				"pip points points";
		}

		&[data-player="2"] {
			grid-area: player2;
			grid-template-areas:
				"name checker pip"
				"points points pip";
		}
	}

	& #timer {
		grid-area: timer;
		display: flex;
		justify-content: center;
		align-items: center;
		gap: .5rem;
		margin-block: auto;
		padding: .5rem;
		border-radius: .5rem;
		font-weight: bold;
		line-height: 1;

		& > .reserve-bank {
			font-size: .9rem;
		}

		& > #move {
			font-size: 1.5rem;
			padding: .5rem .25rem;
			border-radius: 2px;
		}
	}

	& #play-mode {
		grid-area: play-mode;
	}
}

@media (aspect-ratio > 1) {
	body > div {
		grid:
			'pip1    timer     timer     pip2   ' minmax(min-content, max-content)
			'pip1    play-mode play-mode pip2   ' minmax(min-content, max-content)
			'player1 player1   player2   player2' minmax(min-content, max-content)
			/minmax(max-content, 1fr) minmax(min-content, max-content) minmax(min-content, max-content) minmax(min-content, 1fr);

			& > div[data-player] {
				display: contents;

				& > div {
					display: grid;
					justify-content: space-between;
					gap: 0 .75rem;
					padding-inline: 1rem;
					padding-block: .5rem;
					border-radius: .5rem;
					grid-template-areas:
						"name checker"
						"points points";
				}

				&[data-player="1"] {
					& > div {
						grid-area: player1;
					}

					& > .pip {
						grid-area: pip1;
					}
				}

				&[data-player="2"] {
					& > div {
						grid-area: player2;
					}

					& > .pip {
						grid-area: pip2;
					}
				}
			}
	}

	body:has(> svg[data-player="1"]) > div > div[data-player="1"] > div,
	body:has(> svg[data-player="2"]) > div > div[data-player="2"] > div {
		background: var(--surface-container-highest);
	}
}

body:has(> svg[data-player="1"]) > div > div[data-player="1"],
body:has(> svg[data-player="2"]) > div > div[data-player="2"] {
	background: var(--surface-container-highest);
}

body > svg {
	touch-action: none;
	max-height: 100%;

	&[data-player="1"] {
		--player-current-checker-background: var(--player-1-checker-background);
		--player-current-checker-text-color: var(--player-1-checker-text-color);
	}

	&[data-player="2"] {
		--player-current-checker-background: var(--player-2-checker-background);
		--player-current-checker-text-color: var(--player-2-checker-text-color);
	}
}

body:has(#play-mode > select > option[value="opposite"]:checked) > svg[data-player="2"] > foreignObject > div > div:last-of-type {
	rotate: .5turn;
}

body:has(#play-mode > select > option[value="side-by-side"]:checked) {
	flex-direction: column;

	& > div {
		writing-mode: unset;
	}

	& > svg[data-player="1"] > foreignObject > div > div:last-of-type {
		flex-direction: row-reverse;
	}
}

#checker-background {
	cx: var(--checker-radius);
	cy: var(--checker-radius);
	r: var(--checker-radius);
}

#hold {
	translate: calc(var(--half-width) * 2 + var(--bar-width) + 16px + 5px);
	width: var(--hold-width);
	height: var(--hold-height);
	fill: var(--secondary-container);
}

#doubling-cube-face {
	translate: calc(var(--half-width) * 2 + 16px + var(--bar-width) + 5px) calc(.5 * var(--half-height) - var(--die-side-length) / 2);

	& > #die-face-background {
		fill: var(--secondary-container);
	}

	& > text {
		translate: calc(var(--die-side-length) / 2) 22px;
		fill: var(--on-secondary-container);
		font: bold 24px sans-serif;
		text-anchor: middle;
		dominant-baseline: central;
	}
}

body > svg > foreignObject {
	inline-size: calc(2 * var(--half-width) + var(--bar-width) + 16px);
	block-size: var(--half-height);

	& > div {
		position: relative;

		& > div:first-of-type {
			display: flex;
			gap: 8px;

			& > .half {
				inline-size: var(--half-width);
				block-size: var(--half-height);
				display: flex;
				flex-direction: column;
				justify-content: space-between;
				background: var(--primary-container);
				clip-path: fill-box inset(0 round 8px);

				& > .quadrant {
					display: flex;

					& > svg {
						inline-size: var(--point-width);
						block-size: var(--point-height);

						&:nth-child(even) {
							/** TODO Replace with semantic or relative color */
							--fill-color: #6b9c6b;
						}

						&:nth-child(odd) {
							--fill-color: var(--primary);
						}
					}

					&:last-of-type {
						transform: scale(-1, -1);
					}
				}
			}

			& > .bar {
				inline-size: var(--bar-width);
				background: var(--secondary-container);
				border-radius: 8px;
			}
		}

		& > div:last-of-type {
			position: absolute;
			inset-block-start: 0;
			inline-size: 100%;
			block-size: 100%;
			display: flex;
			gap: calc(var(--bar-width) + 16px);

			& > div {
				display: flex;
				flex: 1;
				align-items: center;
				justify-content: center;
				gap: 8px;
			}
		}
	}
}

use[href="#point"] {
	fill: var(--fill-color);
	stroke: var(--fill-color);
}

#drop-points {
	translate: var(--checker-radius) -14px;
}

/*noinspection CssInvalidFunction*/
use[href="#drop-point"],
#checkers > *:not([data-hit]) {
	/* Returns 1 if the --point is in [1,12], else 0. */
	--is-bottom-point: calc(1 - var(--is-top-point));
	/* Returns 1 if the --point is in [13,24], else 0. */
	--is-top-point: round(down, calc((var(--point) - 1) / var(--point-per-side)), 1);
	/* Returns 1 if the --point is in [1,6] âˆª [19,24], else 0. */
	--is-right-point: round(down, abs(calc((var(--point-max) + var(--point-min)) / 2) - var(--point)) / 6, 1);
	--translate-x:
		calc(
			var(--is-top-point) * (var(--checker-diameter) * rem(var(--point) - 1, var(--point-per-side)))
			+ var(--is-bottom-point) * (2 * var(--half-width) - var(--checker-diameter) * (rem(var(--point) - 1, var(--point-per-side)) + 1))
			+ var(--is-right-point) * (var(--bar-width) + 16px)
		);
}

/*noinspection CssInvalidFunction*/
use[href="#drop-point"] {
	translate:
		var(--translate-x)
		calc(
			var(--is-bottom-point) * (var(--half-height) + 28px)
		);
}

use[href="#hold"] {
	&:first-of-type {
		y: calc(.25 * var(--half-height) - var(--hold-height) / 2);
	}

	&:last-of-type {
		y: calc(.75 * var(--half-height) - var(--hold-height) / 2);
	}
}

/*noinspection CssInvalidFunction*/
#checkers > * {
	transition: translate .3s;

	&:not([data-permissible-destination-points="[]"]) {
		&:hover {
			cursor: pointer;
		}

		&.dragging {
			transition: filter .3s;
			cursor: move;
			filter: drop-shadow(2px 4px 4px hsl(from var(--surface) h s l / .3));
		}
	}

	&[data-permissible-destination-points="[]"]:hover {
		cursor: not-allowed;
	}

	&[data-player="1"] {
		fill: var(--player-1-checker-background);
		color: var(--player-1-checker-text-color);
	}

	&[data-player="2"] {
		fill: var(--player-2-checker-background);
		color: var(--player-2-checker-text-color);
	}

	& > text {
		fill: currentColor;
		font-weight: bold;
		font-size: 18px;
		user-select: none;
		dominant-baseline: central;
		text-anchor: middle;

		/* Hide node from accessibility tree when empty. */
		&:empty {
			display: none;
		}
	}

	&[data-hit] {
		translate: calc(var(--half-width) + 8px + (var(--bar-width) - var(--checker-diameter)) / 2) var(--translate-y);

		&[data-player="1"] {
			--translate-y: calc(var(--checker-diameter) * 2.5);
		}

		&[data-player="2"] {
			--translate-y: calc(var(--half-height) - var(--checker-diameter) * 3.5);
		}
	}

	&:not([data-hit]) {
		--top-point-translate-y: calc(var(--checker-diameter) * min(var(--point-stack-index), ((5 - 1) * var(--point-stack-index)) / max(var(--point-stack-count) - 1, 1)));
		--bottom-point-translate-y: calc((var(--half-height) - var(--top-point-translate-y) - var(--checker-diameter)));
		translate:
			var(--translate-x)
			calc(
				var(--is-top-point) * var(--top-point-translate-y)
				+ var(--is-bottom-point) * var(--bottom-point-translate-y)
			);

		--top-point-mask-position-vertical: calc(150% + -1 * round(down, calc(var(--point-stack-count) / 6), 1) * (1 - round(down, calc((var(--point-stack-index) + 1) / var(--point-stack-count)), 1)) * (105% - ((4 / max(var(--point-stack-count) - 1, 1)) * 100%)));
		--bottom-point-mask-position-vertical: calc(100% - var(--top-point-mask-position-vertical));
		mask-image:
			radial-gradient(
				black var(--checker-radius),
				transparent var(--checker-radius)
			),
			radial-gradient(
				circle at center calc(var(--is-top-point) * var(--top-point-mask-position-vertical) + var(--is-bottom-point) * var(--bottom-point-mask-position-vertical)),
				black var(--checker-radius),
				transparent var(--checker-radius)
			);
		mask-composite: subtract;
	}
}

#die-face-background {
	width: var(--die-side-length);
	height: var(--die-side-length);
	fill: var(--player-current-checker-background);
}

.die-pip {
	r: 4px;
	fill: var(--player-current-checker-text-color);

	&.x0 {
		cx: calc(var(--die-side-length) * .25);
	}

	&.x1 {
		cx: calc(var(--die-side-length) * .5);
	}

	&.x2 {
		cx: calc(var(--die-side-length) * .75);
	}

	&.y0 {
		cy: calc(var(--die-side-length) * .25);
	}

	&.y1 {
		cy: calc(var(--die-side-length) * .5);
	}

	&.y2 {
		cy: calc(var(--die-side-length) * .75);
	}
}

#confirm {
	--surface: hsl(149 83% 28%);
	--color: hsl(0 0% 100%);
}

#double,
#undo,
#roll-dice {
	--surface: var(--player-current-checker-background);
	--color: var(--player-current-checker-text-color);
}

#confirm,
#double,
#undo,
#roll-dice {
	block-size: 40px;
	font-weight: bold;
	font-size: 1rem;
	padding-inline: 20px;
	border: none;
	border-radius: 4px;
	--alpha: 1;
	background: hsl(from var(--surface) h s l / var(--alpha));
	color: hsl(from var(--color) h s l / var(--alpha));

	&:disabled {
		--alpha: .5;
	}

	&:hover:not(:disabled) {
		--alpha: .85;
	}
}

#dice-container {
	display: none;
	block-size: var(--height);
	flex-direction: column;
	align-items: center;
}

#dice-swap {
	block-size: 12px;
	margin-block: 4px;
}

#dice {
	/* TODO Remove setting of full-width, as this causes the "click to swap dice" click zone to be too large. */
	inline-size: 100%;
	block-size: 56px;

	:nth-child(1):nth-last-child(4),
	:nth-child(2):nth-last-child(3) {
		transition: translate .4s;
	}

	:nth-child(1):nth-last-child(2) {
		translate: calc(var(--half-width) / 2 - var(--die-side-length) - var(--die-gap) / 2);
	}

	:nth-child(2):last-child {
		translate: calc(var(--half-width) / 2 + var(--die-gap) / 2);
	}

	:nth-child(1):nth-last-child(4) {
		translate: calc(var(--half-width) / 2 - 2 * var(--die-side-length) - 3 * var(--die-gap) / 2);
	}

	:nth-child(2):nth-last-child(3) {
		translate: calc(var(--half-width) / 2 - var(--die-side-length) - var(--die-gap) / 2);
	}

	:nth-child(3):nth-last-child(2) {
		translate: calc(var(--half-width) / 2 + var(--die-gap) / 2);
	}

	:nth-child(4):nth-last-child(1) {
		translate: calc(var(--half-width) / 2 + var(--die-side-length) + 3 * var(--die-gap) / 2);
	}

	:nth-child(3):nth-last-child(2),
	:nth-child(4):nth-last-child(1) {
		animation: .2s .3125s 1 backwards fade-in;
	}
}

@keyframes fade-in {
	from {
		opacity: 0;
	}
	to {
		opacity: 1;
	}
}

.die[data-played-at] {
	opacity: .5;
}
